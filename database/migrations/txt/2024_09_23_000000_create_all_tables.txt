<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateAllTables extends Migration
{
    public function up()
    {
        // Users and related tables
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('last_name');
            $table->string('first_name');
            $table->string('middle_name')->nullable();
            $table->string('email')->unique();
            $table->string('password');
            $table->string('gender');
            $table->string('marital_status');
            $table->date('birthdate');
            $table->string('birthplace');
            $table->string('contact_number');
            $table->boolean('is_verified')->default(false);
            $table->string('status');
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('addresses', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->string('number');
            $table->string('street');
            $table->string('city');
            $table->string('region');
            $table->string('zipcode');
            $table->timestamps();
        });

        Schema::create('roles', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('description');
            $table->timestamps();
        });

        Schema::create('role_user', function (Blueprint $table) {
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('role_id')->constrained()->onDelete('cascade');
            $table->primary(['user_id', 'role_id']);
        });

        Schema::create('permissions', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->timestamps();
        });

        Schema::create('permission_role', function (Blueprint $table) {
            $table->foreignId('permission_id')->constrained()->onDelete('cascade');
            $table->foreignId('role_id')->constrained()->onDelete('cascade');
            $table->primary(['permission_id', 'role_id']);
        });

        // Hospitals and related tables
        Schema::create('hospitals', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('contact_number');
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('departments', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->timestamps();
        });

        Schema::create('specialties', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->text('description');
            $table->timestamps();
        });

        // Doctors
        Schema::create('doctors', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('department_id')->constrained();
            $table->foreignId('specialty_id')->constrained();
            $table->string('license_number')->unique();
            $table->date('license_expiry_date');
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('doctor_hospital', function (Blueprint $table) {
            $table->foreignId('doctor_id')->constrained()->onDelete('cascade');
            $table->foreignId('hospital_id')->constrained()->onDelete('cascade');
            $table->primary(['doctor_id', 'hospital_id']);
        });

        Schema::create('clinic_hours', function (Blueprint $table) {
            $table->id();
            $table->foreignId('doctor_id')->constrained()->onDelete('cascade');
            $table->date('date');
            $table->time('start_time');
            $table->time('end_time');
            $table->boolean('is_recurring');
            $table->timestamps();
        });

        // Patients and Diseases
        Schema::create('patients', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('diseases', function (Blueprint $table) {
            $table->id();
            $table->foreignId('patient_id')->constrained()->onDelete('cascade');
            $table->string('primary_site');
            $table->date('diagnosis_date');
            $table->string('basis');
            $table->string('laterality')->nullable();
            $table->string('histology');
            $table->string('extent');
            $table->float('tumor_size')->nullable();
            $table->string('lymph_node')->nullable();
            $table->boolean('is_metastatic');
            $table->string('metastatic_site')->nullable();
            $table->boolean('is_multiple_primary');
            $table->json('other_sites')->nullable();
            $table->string('t_stage')->nullable();
            $table->string('n_stage')->nullable();
            $table->string('m_stage')->nullable();
            $table->string('g_stage')->nullable();
            $table->string('stage');
            $table->string('stage_type');
            $table->string('status');
            $table->string('pathology')->nullable();
            $table->string('tumor_extension')->nullable();
            $table->string('tumor_grade')->nullable();
            $table->integer('node_positive')->nullable();
            $table->integer('node_harvest')->nullable();
            $table->boolean('has_negative_margins')->nullable();
            $table->boolean('is_alive')->nullable();
            $table->boolean('has_symptoms')->nullable();
            $table->boolean('has_recurrence')->nullable();
            $table->boolean('is_curative')->nullable();
            $table->timestamps();
            $table->softDeletes();
        });

        // Treatments
        Schema::create('treatments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('patient_id')->constrained()->onDelete('cascade');
            $table->string('primary_treatment');
            $table->string('purpose');
            $table->string('plan');
            $table->date('initial_rx_date');
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('surgeries', function (Blueprint $table) {
            $table->id();
            $table->foreignId('treatment_id')->constrained()->onDelete('cascade');
            $table->string('operation');
            $table->date('date');
            $table->text('findings');
            $table->string('intent');
            $table->foreignId('surgeon_id')->constrained('doctors');
            $table->foreignId('hospital_id')->constrained();
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('chemotherapies', function (Blueprint $table) {
            $table->id();
            $table->foreignId('treatment_id')->constrained()->onDelete('cascade');
            $table->string('type');
            $table->string('protocol');
            $table->date('initial_date');
            $table->date('end_date')->nullable();
            $table->integer('cycle_number');
            $table->string('status');
            $table->boolean('is_completed');
            $table->foreignId('facility_id')->constrained('hospitals');
            $table->foreignId('doctor_id')->constrained();
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('radiotherapies', function (Blueprint $table) {
            $table->id();
            $table->foreignId('treatment_id')->constrained()->onDelete('cascade');
            $table->string('type');
            $table->date('initial_date');
            $table->date('last_date')->nullable();
            $table->float('dose');
            $table->string('body_site');
            $table->string('status');
            $table->boolean('is_completed');
            $table->foreignId('facility_id')->constrained('hospitals');
            $table->foreignId('doctor_id')->constrained();
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('immunotherapies', function (Blueprint $table) {
            $table->id();
            $table->foreignId('treatment_id')->constrained()->onDelete('cascade');
            $table->string('drug');
            $table->date('initial_date');
            $table->date('end_date')->nullable();
            $table->string('status');
            $table->boolean('is_completed');
            $table->foreignId('facility_id')->constrained('hospitals');
            $table->foreignId('doctor_id')->constrained();
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('hormonal_therapies', function (Blueprint $table) {
            $table->id();
            $table->foreignId('treatment_id')->constrained()->onDelete('cascade');
            $table->string('drug');
            $table->string('dose');
            $table->date('start_date');
            $table->date('end_date')->nullable();
            $table->string('status');
            $table->foreignId('doctor_id')->constrained();
            $table->timestamps();
            $table->softDeletes();
        });

        // Messaging system
        Schema::create('threads', function (Blueprint $table) {
            $table->id();
            $table->string('subject');
            $table->timestamps();
        });

        Schema::create('messages', function (Blueprint $table) {
            $table->id();
            $table->foreignId('thread_id')->constrained()->onDelete('cascade');
            $table->foreignId('sender_id')->constrained('users');
            $table->text('content');
            $table->timestamp('sent_at');
            $table->timestamp('read_at')->nullable();
            $table->timestamps();
        });

        Schema::create('thread_user', function (Blueprint $table) {
            $table->foreignId('thread_id')->constrained()->onDelete('cascade');
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->primary(['thread_id', 'user_id']);
        });

        Schema::create('notifications', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->morphs('notifiable');
            $table->string('type');
            $table->json('data');
            $table->timestamp('read_at')->nullable();
            $table->timestamps();
        });

        // Appointments
        Schema::create('appointments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('patient_id')->constrained()->onDelete('cascade');
            $table->foreignId('doctor_id')->constrained()->onDelete('cascade');
            $table->dateTime('start_time');
            $table->dateTime('end_time');
            $table->string('status');
            $table->text('notes')->nullable();
            $table->timestamps();
            $table->softDeletes();
        });
    }

    public function down()
    {
        $tables = [
            'appointments', 'notifications', 'thread_user', 'messages', 'threads',
            'hormonal_therapies', 'immunotherapies', 'radiotherapies', 'chemotherapies', 'surgeries',
            'treatments', 'diseases', 'patients', 'clinic_hours', 'doctor_hospital',
            'doctors', 'specialties', 'departments', 'hospitals', 'permission_role',
            'permissions', 'role_user', 'roles', 'addresses', 'users'
        ];

        foreach ($tables as $table) {
            Schema::dropIfExists($table);
        }
    }
}